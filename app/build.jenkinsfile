pipeline {
    agent { label 'osher-ec2-fleet' }

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
    }
    environment {
        image_tag = "polybot:$BUILD_NUMBER"
        IMG_NAME = "polybot:${BUILD_NUMBER}"
        DOCKER_REGISTRY = "eldiabloj/polybot"
        SNYK_TOKEN = credentials("SNYK_TOKEN")
        TELEGRAM_TOKEN = credentials('telegarm-token')
        ecr_registry = "023196572641.dkr.ecr.us-east-2.amazonaws.com"
        ecr_repo = "${ecr_registry}/osher-ecr" // Remove ":latest" here
        aws_region = "us-east-2"

        sns_topic_arn = "arn:aws:sns:us-east-2:023196572641:osher-polyapp-build" // SNS ARN Topic
    }

    stages {
        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        try {
                            dir('app/polybot') {
                                sh "docker login -u ${USERNAME} -p ${USERPASS}"
                                sh "docker build -t ${IMG_NAME} ."
                            }
                        } catch (Exception e) {
                            echo "Docker build failed: ${e.message}"
                            error "Build failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    sh "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy polybot to dev') {
            steps {
                script {
                    echo 'docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d'
                    echo 'docker-compose -f docker-compose.yaml up -d'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside("-w /app") {
                        sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install mastodon.py tweepy
                        grep -v 'polybot' app/requirements.txt > temp_requirements.txt
                        pip install -r temp_requirements.txt
                        rm temp_requirements.txt
                        pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705,E1136 app/polybot/*.py
                        deactivate
                        '''
                    }
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                script {
                    sh "docker images ${IMG_NAME}"
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')
                    ]) {
                        sh "snyk auth ${SNYK_TOKEN}"
                        echo "snyk container test ${IMG_NAME} --policy-path=.snyk"
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    echo "Starting Unit Tests"
                    docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside {
                        sh '''
                        echo "Current directory:"
                        pwd

                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install mastodon.py tweepy
                        grep -v 'polybot' app/requirements.txt > temp2_requirements.txt
                        pip install -r temp2_requirements.txt
                        rm temp2_requirements.txt
                        pip install pytest-xdist pytest-timeout

                        # Run pytest with verbosity and timeout for each test
                        python3 -m pytest -n 4 --timeout=60 --junitxml results.xml app/test/*.py
                        deactivate
                        '''
                    }
                    echo "Unit Tests completed"
                }
            }
        }

        stage('Push to Amazon ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                    credentialsId: 'AIDAQKZU7TPQ2NYHX4YLMosher-aws'
                ]]) {
                    script {
                        sh """
                            aws ecr get-login-password --region ${env.aws_region} | docker login --username AWS --password-stdin ${env.ecr_registry}


                            docker tag ${env.image_tag} ${env.ecr_repo}:${BUILD_NUMBER}


                            docker push ${env.ecr_repo}:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                credentialsId: 'AIDAQKZU7TPQ2NYHX4YLMosher-aws'
            ]]) {
                sh """
                    aws sns publish --region ${env.aws_region} --topic-arn ${env.sns_topic_arn} \\
                        --message "Pipeline succeeded for build #${env.BUILD_NUMBER} on ${env.JOB_NAME}" \\
                        --subject "Jenkins Pipeline Success Notification"
                """
            }
        }
        failure {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                credentialsId: 'AIDAQKZU7TPQ2NYHX4YLMosher-aws'
            ]]) {
                sh """
                    aws sns publish --region ${env.aws_region} --topic-arn ${env.sns_topic_arn} \\
                        --message "Pipeline failed for build #${env.BUILD_NUMBER} on ${env.JOB_NAME}" \\
                        --subject "Jenkins Pipeline Failure Notification"
                """
            }
        }
        always {
            script {
                sh """
                    docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | xargs -r docker stop
                    docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | xargs -r docker rm -f
                """

                // Remove images related to this build except the latest
                sh """
                    docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '${DOCKER_REGISTRY}' | grep -v ':latest' | grep -v ':${BUILD_NUMBER}' | awk '{print \$2}' | xargs -r docker rmi -f
                """

                // Clean workspace
                cleanWs()
            }
        }
    }
}



// s3_bucket = "osher-s3-bucket" // Your S3 bucket environment variable