pipeline {
    agent any

    environment {
        IMG_NAME = "polybot:${BUILD_NUMBER}"
        DOCKER_REGISTRY = "eldiabloj/polybot"
    }

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
    }

    stages {
        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        try {
                            // Change directory to where Dockerfile is located
                            dir('app') {
                                // Login to Docker registry
                                bat "docker login -u ${USERNAME} -p ${USERPASS}"
                                // Build Docker image
                                bat "docker build -t ${IMG_NAME} ."
                            }
                        } catch (Exception e) {
                            echo "Docker build failed"
                            error "Build failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Tag and push Docker image to registry
                    bat "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    bat "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy polybot') {
            steps {
                script {
                    echo "Deploying to Kubernetes cluster..."
                    echo "Using Docker image: ${params.IMAGE_TAG}"
                    echo "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Using DOCKER_REGISTRY instead of DOCKER_REPO
                    docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside {
                        sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt
                        pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705 polybot/*.py
                        deactivate
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up old containers but not the new one
            script {
                try {
                    // Fetch the container ID of the currently running container
                    def containerId = bat(script: "docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}", returnStdout: true).trim()

                    if (containerId) {
                        // Remove all stopped containers with the same image except the current one
                        bat """
                            docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | findstr /V "${containerId}" | for /F "tokens=*" %%i in ('more') do docker rm -f %%i
                        """
                    } else {
                        echo "No old containers found to remove."
                    }
                } catch (Exception e) {
                    echo "Error cleaning up old containers: ${e.message}"
                }
            }

            // Clean up old Docker images but keep the new one
            script {
                try {
                    bat """
                        docker images -q ${DOCKER_REGISTRY}:${BUILD_NUMBER} | for /F "tokens=*" %%i in ('more') do docker rmi -f %%i
                    """
                } catch (Exception e) {
                    echo "Error cleaning up old Docker images: ${e.message}"
                }
            }

            // Clean build artifacts from Jenkins workspace
            cleanWs()
        }
    }
}




// pipeline {
//     agent any
//
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//         DOCKER_REGISTRY = "eldiabloj/polybot"
//     }
//
//     parameters {
//         string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
//     }
//
//     stages {
//         stage('Build Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             //Change directory to where Dockerfile is located
//                             dir('app') {
//                                 //Login to Docker registry
//                                 bat "docker login -u ${USERNAME} -p ${USERPASS}"
//                                 //Build Docker image
//                                 bat "docker build -t ${IMG_NAME} ."
//                             }
//                         } catch (Exception e) {
//                             echo "Docker build failed"
//                             error "Build failed: ${e.message}"
//                         }
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     //Tag and push Docker image to registry
//                     bat "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                     bat "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                 }
//             }
//         }
//
//         stage('Deploy polybot') {
//             steps {
//                 script {
//                     echo "Deploying to Kubernetes cluster..."
//                     echo "Using Docker image: ${params.IMAGE_TAG}"
//                     echo "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
//                 }
//             }
//         }
//     }
//
//     stage('Test') {
//             steps {
//                 script {
//                     docker.image("${DOCKER_REPO}:${BUILD_NUMBER}").inside {
//                         sh '''
//                         python3 -m venv venv
//                         . venv/bin/activate
//                         pip install -r requirements.txt
//                         pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705 polybot/*.py
//                         deactivate
//                         '''
//                     }
//                 }
//             }
//         }
//     }
//
//     post {
//         always {
//             // Clean up old containers but not the new one
//             script {
//                 try {
//                     //Fetch the container ID of the currently running container
//                     def containerId = bat(script: "docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}", returnStdout: true).trim()
//
//                     if (containerId) {
//                         //Remove all stopped containers with the same image except the current one
//                         bat """
//                             docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | findstr /V "${containerId}" | for /F "tokens=*" %%i in ('more') do docker rm -f %%i
//                         """
//                     } else {
//                         echo "No old containers found to remove."
//                     }
//                 } catch (Exception e) {
//                     echo "Error cleaning up old containers: ${e.message}"
//                 }
//             }
//
//             //Clean up old Docker images but keep the new one
//             script {
//                 try {
//                     bat """
//                         docker images -q ${DOCKER_REGISTRY}:${BUILD_NUMBER} | for /F "tokens=*" %%i in ('more') do docker rmi -f %%i
//                     """
//                 } catch (Exception e) {
//                     echo "Error cleaning up old Docker images: ${e.message}"
//                 }
//             }
//
//             //Clean build artifacts from Jenkins workspace
//             cleanWs()
//         }
//     }
// }


//     stage('Test') {
//         steps {
//             script {
//
//                 docker.image("${DOCKER_REPO}:${BUILD_NUMBER}").inside {
//                      sh '''
//                      python3 -m venv venv
//                      . venv/bin/activate
//                      pip install -r requirements.txt
//                      pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705 polybot/*.py
//                      deactivate
//                      '''
//                 }
//             }
//         }
//     }
//
//
//     post {
//         always {
//            // Clean up old containers but not the new one
//             script {
//                 try {
//                     //Fetch the container ID of the currently running container
//                     def containerId = bat(script: "docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}", returnStdout: true).trim()
//
//                     if (containerId) {
//                         //Remove all stopped containers with the same image except the current one
//                         bat """
//                             docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | findstr /V "${containerId}" | for /F "tokens=*" %%i in ('more') do docker rm -f %%i
//                         """
//                     } else {
//                         echo "No old containers found to remove."
//                     }
//                 } catch (Exception e) {
//                     echo "Error cleaning up old containers: ${e.message}"
//                 }
//             }
//
//             //Clean up old Docker images but keep the new one
//             script {
//                 try {
//                     bat """
//                         docker images -q ${DOCKER_REGISTRY}:${BUILD_NUMBER} | for /F "tokens=*" %%i in ('more') do docker rmi -f %%i
//                     """
//                 } catch (Exception e) {
//                     echo "Error cleaning up old Docker images: ${e.message}"
//                 }
//             }
//
//             //Clean build artifacts from Jenkins workspace
//             cleanWs()
//         }
//     }





// vir5
// pipeline {
//     agent any
//
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//         DOCKER_REGISTRY = "eldiabloj/polybot"
//     }
//
//     parameters {
//         string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
//     }
//
//     stages {
//         stage('Build Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             // Change directory to where Dockerfile is located
//                             dir('polybot') {
//                                 // Login to Docker registry
//                                 bat "docker login -u ${USERNAME} -p ${USERPASS}"
//                                 // Build Docker image
//                                 bat "docker build -t ${IMG_NAME} ."
//                             }
//                         } catch (Exception e) {
//                             echo "Docker build failed"
//                             error "Build failed: ${e.message}"
//                         }
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     // Tag and push Docker image to registry
//                     bat "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                     bat "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                 }
//             }
//         }
//
//         stage('Deploy polybot') {
//             steps {
//                 script {
//                     echo "Deploying to Kubernetes cluster..."
//                     echo "Using Docker image: ${params.IMAGE_TAG}"
//                     echo "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
//                 }
//             }
//         }
//     }
//
//     post {
//         always {
//             // Clean up old containers but not the new one
//             script {
//                 // Fetch the container ID of the currently running container
//                 def containerId = bat(script: "docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}", returnStdout: true).trim()
//
//                 // Remove all stopped containers with the same image except the current one
//                 bat """
//                     docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | findstr /V "${containerId}" | for /F "tokens=*" %%i in ('more') do docker rm -f %%i
//                 """
//             }
//
//             // Clean up old Docker images but keep the new one
//             script {
//                 bat """
//                     docker images -q ${DOCKER_REGISTRY}:${BUILD_NUMBER} | for /F "tokens=*" %%i in ('more') do docker rmi -f %%i
//                 """
//             }
//
//             // Clean build artifacts from Jenkins workspace
//             cleanWs()
//         }
//     }
// }





// vir4
// pipeline {
//     agent any
//
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//         DOCKER_REGISTRY = "eldiabloj/polybot"
//     }
//
//     parameters {
//         string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
//     }
//
//     stages {
//         stage('Build Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             // Change directory to where Dockerfile is located
//                             dir('polybot') {
//                                 // Login to Docker registry
//                                 bat "docker login -u ${USERNAME} -p ${USERPASS}"
//                                 // Build Docker image
//                                 bat "docker build -t ${IMG_NAME} ."
//                             }
//                         } catch (Exception e) {
//                             echo "Docker build failed"
//                             error "Build failed: ${e.message}"
//                         }
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     // Tag and push Docker image to registry
//                     bat "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}"
//                     bat "docker push ${DOCKER_REGISTRY}"
//                 }
//             }
//         }
//
//         stage('Deploy polybot') {
//             steps {
//                 script {
//                     echo "Deploying to Kubernetes cluster..."
//                     echo "Using Docker image: ${params.IMAGE_TAG}"
//                     echo "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
//                 }
//             }
//         }
//     }
//
//     post {
//         always {
//             // Clean up old containers but not the new one
//             script {
//                 // Fetch the container ID of the currently running container
//                 def containerId = sh(script: "docker ps -q -f ancestor=${DOCKER_REPO}:${BUILD_NUMBER}", returnStdout: true).trim()
//
//                 // Remove all stopped containers with the same image except the current one
//                 sh """
//                     for id in \$(docker ps -a -q -f ancestor=${DOCKER_REPO}:${BUILD_NUMBER}); do
//                         if [ "\$id" != "${containerId}" ]; then
//                             docker rm -f \$id || true
//                         fi
//                     done
//                 """
//             }
//
//             // Clean up old Docker images but keep the new one
//             script {
//                 sh """
//                     docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '${DOCKER_REPO}' | grep -v ':latest' | grep -v ':${BUILD_NUMBER}' | awk '{print \$2}' | xargs --no-run-if-empty docker rmi -f || true
//                 """
//
//             }
//
//             // Clean build artifacts from Jenkins server
//             cleanWs()
//         }
//     }





//  biuld vir2
//  pipeline {
//      agent any
//      environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//         DOCKER_REGISTRY = "eldiabloj"  // Adjust this based on your Docker registry URL
//     }
//     stages {
//         stage('Build Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'jenkins.docker', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             Change directory to where Dockerfile is located
//                             dir('polybot') {
//                                 Login to Docker registry
//                                 bat "docker login -u ${USERNAME} -p ${USERPASS}"
//                                 Build Docker image
//                                 bat "docker build -t ${IMG_NAME} ."
//                             }
//                         } catch (Exception e) {
//                             echo "Docker build failed"
//                             error "Build failed: ${e.message}"
//                         }
//                     }
//                 }
//             }
//         }
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     Tag and push Docker image to registry
//                     bat "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}/${IMG_NAME}"
//                     bat "docker push ${DOCKER_REGISTRY}/${IMG_NAME}"
//                 }
//             }
//         }
//         stage('Trigger Deploy') {
//             steps {
//                 script {
//                     Trigger deployment job with the newly built image tag
//                     build job: 'deploy_polybot', wait: false, parameters: [
//                         string(name: 'IMAGE_TAG', value: "${DOCKER_REGISTRY}/${IMG_NAME}")
//                     ]
//                 }
//             }
//         }
//     } //stages

// }
// deploy v1
// pipeline {
//   agent any
//     parameters {
//         string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:50')
//     }
//     stages {
//         stage('deploy.jenkinsfile') {
//             steps {
//                 script {
//                     bat '''
//                     echo "Deploying to Kubernetes cluster..."
//                     echo "Using Docker image: ${IMAGE_TAG}"
//                     echo "kubectl set image deployment/polybot polybot=${IMAGE_TAG}"
//                     echo i deed it
//                     '''
//                 }
//             }
//         }
//     }
// }
//
//
// pipeline {
//   agent {
//   docker {
//        image 'eldiabloj/dockerfile_agent:latest'
//        args  '-v "//var/run/docker.sock:/var/run/docker.sock'
//    }
//   }
//    environment {
//        IMG_NAME = "polybot:${BUILD_NUMBER}"
//    }
//    stages {
//        stage('Build Docker Image') {
//            steps {
//                withCredentials([usernamePassword(credentialsId: 'jenkins.docker', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                    script {
//                       try {
//                            bat '''
//                            cd polybot
//                            docker login -u %USERNAME% -p %USERPASS%
//                            docker build -t %IMG_NAME% .
//                            '''
//                        } catch (Exception e) {
//                            echo "Docker build failed"
//                            error "Build failed: ${e.message}"
//                        }
//                        bat '''
//                        docker tag %IMG_NAME% eldiabloj/%IMG_NAME%
//                        docker push eldiabloj/%IMG_NAME%
//                        '''
//                    }
//                }
//            }
//        }
//        stage('Trigger Deploy') {
//            steps {
//                script {
//                    build job: 'deploy_polybot', wait: false, parameters: [
//                        string(name: 'IMAGE_TAG', value: "eldiabloj/polybot:${BUILD_NUMBER}")
//                    ]
//                }
//            }
//        }
//    }
//}




// vir 2
// pipeline {
//     agent any
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//     }
//     stages {
//         stage('Build docker image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'jenkins.docker', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             bat '''
//                             cd polybot
//                             docker login -u %USERNAME% -p %USERPASS%
//                             docker build -t %IMG_NAME% .
//                             '''
//                         } catch (Exception e) {
//                             echo "Docker build failed"
//                             error "Build failed: ${e.message}"
//                         }
//                         bat '''
//                         docker tag %IMG_NAME% eldiabloj/%IMG_NAME%
//                         docker push eldiabloj/%IMG_NAME%
//                         '''
//                     }
//                 }
//             }
//         }
//
//         stage('Trigger Deploy') {
//             steps {
//                 script {
//                     build job: 'deploy_polybot', wait: false, parameters: [
//                         string(name: 'IMAGE_NAME', value: "eldiabloj/polybot:${BUILD_NUMBER}")
//                     ]
//                 }
//             }
//         }
//     }
// }




// vir 1
// pipeline {
//     agent any
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//     }
//     stages {
//         stage('Build docker image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'jenkins.docker', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             bat '''
//                             cd polybot
//                             docker login -u %USERNAME% -p %USERPASS%
//                             docker build -t %IMG_NAME% .
//                             '''
//                         } catch (Exception e) {
//                             echo "Docker build failed"
//                             error "Build failed: ${e.message}"
//                         }
//                         bat '''
//                         docker tag %IMG_NAME% eldiabloj/%IMG_NAME%
//                         docker push eldiabloj/%IMG_NAME%
//                         '''
//                     }
//                 }
//             }
//         }
//     }
// }
//
// stage('Trigger Deploy') {
//     steps {
//         build job: 'deploy_polybot', wait: false, parameters: [
//             string(name: 'eldiabloj/polybot:${BUILD_NUMBER}', value: "polybot")
//         ]
//     }
// }
//
//



