pipeline {
    agent {
        docker {
            image "eldiabloj/dockerfile_agent:latest"
            args "--user root -v /var/run/docker.sock:/var/run/docker.sock"
        }
    }

    environment {
        IMG_NAME = "polybot:${BUILD_NUMBER}"
        DOCKER_REGISTRY = "eldiabloj/polybot"
        SNYK_TOKEN = credentials("SNYK_TOKEN")
    }

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
    }

    stages {
        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        try {
                            dir('app') {
                                sh "docker login -u ${USERNAME} -p ${USERPASS}"
                                sh "docker build -t ${IMG_NAME} ."
                            }
                        } catch (Exception e) {
                            echo "Docker build failed: ${e.message}"
                            error "Build failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    sh "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy polybot') {
            steps {
                script {
                    echo "Deploying to Kubernetes cluster..."
                    echo "Using Docker image: ${params.IMAGE_TAG}"
                    echo "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside("-w /app") {
                        sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r app/requirements.txt
                        pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705,E1136 app/polybot/*.py
                        deactivate
                        '''
                    }
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                script {
                    sh "docker images ${IMG_NAME}"
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')
                    ]) {
                        sh "snyk auth ${SNYK_TOKEN}"
                        echo "snyk container test ${IMG_NAME} --policy-path=.snyk"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def DOCKER_REGISTRY = env.DOCKER_REGISTRY
                def containerId = sh(script: "docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}", returnStdout: true).trim()

                sh """
                    for id in \$(docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}); do
                        if [ "\$id" != "${containerId}" ]; then
                            docker rm -f \$id || true
                        fi
                    done
                """
            }
            script {
                sh """
                    docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '${DOCKER_REGISTRY}' | grep -v ':latest' | grep -v ':${BUILD_NUMBER}' | awk '{print \$2}' | xargs --no-run-if-empty docker rmi -f || true
                """
            }

            cleanWs()
        }

        failure {
            script {
                def errorMessage = currentBuild.result == 'FAILURE' ? currentBuild.description : 'Build failed'
                echo "Error occurred: ${errorMessage}"
            }
        }
    }
}


// vir9
// pipeline {
//     agent {
//         docker {
//             image "eldiabloj/polybot:tagname"
//             args "oj@ubuntu -v /var/run/docker.sock:/var/run/docker.sock"
//         }
//     }
//
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//         DOCKER_REGISTRY = "eldiabloj/polybot"
//         SNYK_TOKEN = credentials("snyk-jenkins")
//     }
//
//     parameters {
//         string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
//     }
//
//     stages {
//         stage('Build Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             dir('app') {
//                                 sh "docker login -u ${USERNAME} -p ${USERPASS}"
//                                 sh "docker build -t ${IMG_NAME} ."
//                             }
//                         } catch (Exception e) {
//                             echo "Docker build failed: ${e.message}"
//                             error "Build failed: ${e.message}"
//                         }
//                     }
//                 }
//             }
//         }
//
//         stage('Snyk Scan') {
//             steps {
//                 script {
//                     // Assuming you have credentials IDs 'username-password' and 'ssh-key' configured in Jenkins
//                     withCredentials([
//                         usernamePassword(credentialsId: 'SNYK_TOKEN', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'),
//                         string(credentialsId: 'ssh-key', variable: 'SSH_KEY')
//                     ]) {
//                         // Access the username and password from environment variables
//                         sh "echo Username: $USERNAME"
//                         sh "echo Password: ****"  // Password will be masked
//
//                         sh """
//                           snyk auth
//                           snyk test --docker ${IMG_NAME}
//                         """
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     sh "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                     sh "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                 }
//             }
//         }
//
//         stage('Deploy polybot') {
//             steps {
//                 script {
//                     echo "Deploying to Kubernetes cluster..."
//                     echo "Using Docker image: ${params.IMAGE_TAG}"
//                     sh "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
//                 }
//             }
//         }
//
//         stage('Test') {
//             steps {
//                 script {
//                     docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside("-w /app") {
//                         sh '''
//                         python3 -m venv venv
//                         . venv/bin/activate
//                         pip install -r app/requirements.txt
//                         pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705,E1136 app/polybot/*.py
//                         deactivate
//                         '''
//                     }
//                 }
//             }
//         }
//     }
//
//     post {
//         always {
//             node {
//                 script {
//                     try {
//                         // Clean up old containers but not the new one
//                         sh """
//                             docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | grep -v `docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}` | xargs docker rm -f
//                         """
//                     } catch (Exception e) {
//                         echo "Error cleaning up old containers: ${e.message}"
//                     }
//
//                     try {
//                         // Clean up old Docker images but keep the new one
//                         sh "docker images -q ${DOCKER_REGISTRY}:${BUILD_NUMBER} | xargs docker rmi -f"
//                     } catch (Exception e) {
//                         echo "Error cleaning up old Docker images: ${e.message}"
//                     }
//
//                     // Clean build artifacts from Jenkins workspace
//                     cleanWs()
//                 }
//             }
//         }
//     }
// }






//     post {
//         always {
//             script {
//                 try {
//                     // Clean up old containers but not the new one
//                     sh """
//                         docker ps -a -q -f ancestor=eldiabloj/polybot:${BUILD_NUMBER} | grep -v `docker ps -q -f ancestor=eldiabloj/polybot:${BUILD_NUMBER}` | xargs docker rm -f
//                     """
//                 } catch (Exception e) {
//                     echo "Error cleaning up old containers: ${e.message}"
//                 }
//
//                 try {
//                     // Clean up old Docker images but keep the new one
//                     sh "docker images -q eldiabloj/polybot:${BUILD_NUMBER} | xargs docker rmi -f"
//                 } catch (Exception e) {
//                     echo "Error cleaning up old Docker images: ${e.message}"
//                 }
//
//                 // Clean build artifacts from Jenkins workspace
//                 cleanWs()
//             }
//         }
//     }
// }


//
//     stages {
//         stage('Checkout and Build') {
//             steps {
//                 script {
//                     // Assuming you have credentials IDs 'username-password' and 'ssh-key' configured in Jenkins
//                     withCredentials([
//                         usernamePassword(credentialsId: 'username-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'),
//                         string(credentialsId: 'ssh-key', variable: 'SSH_KEY')
//                     ]) {
//                         // Access the username and password from environment variables
//                         sh "echo Username: $USERNAME"
//                         sh "echo Password: ****"  // Password will be masked
//
//                         sh """
//                             echo "SSH Key:"
//                             echo $SSH_KEY
//                         """
//                     }
//                 }
//             }
//         }
//     }
// }





//
// vir8
// pipeline {
// agent {
//     docker {
//         image 'eldiabloj/polybot:tagname'
//         args  'oj@ubuntu -v /var/run/docker.sock:/var/run/docker.sock'
//     }
// }
//
//
//     environment {
//         IMG_NAME = "polybot:${BUILD_NUMBER}"
//         DOCKER_REGISTRY = "eldiabloj/polybot"
//     }
//
//     parameters {
//         string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
//     }
//
//     stages {
//         stage('Build Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
//                     script {
//                         try {
//                             // Change directory to where Dockerfile is located
//                             dir('app') {
//                                 // Login to Docker registry
//                                 sh "docker login -u ${USERNAME} -p ${USERPASS}"
//                                 // Build Docker image
//                                 sh "docker build -t ${IMG_NAME} ."
//                             }
//                         } catch (Exception e) {
//                             echo "Docker build failed: ${e.message}"
//                             error "Build failed: ${e.message}"
//                         }
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     // Tag and push Docker image to registry
//                     sh "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                     sh "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
//                 }
//             }
//         }
//
//         stage('Deploy polybot') {
//             steps {
//                 script {
//                     echo "Deploying to Kubernetes cluster..."
//                     echo "Using Docker image: ${params.IMAGE_TAG}"
//                     echo "kubectl set image deployment/polybot polybot=${params.IMAGE_TAG}"
//                 }
//             }
//         }
//
//         stage('Test') {
//             steps {
//                 script {
//                     // Run tests inside Docker container
//                     docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside("-w /app") {
//                         sh '''
//                         python3 -m venv venv
//                         . venv/bin/activate
//                         pip install -r app/requirements.txt
//                         pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705,E1136 app/polybot/*.py
//                         deactivate
//                         '''
//                     }
//                 }
//             }
//         }
//     }
//
//     post {
//         always {
//             script {
//                 try {
//                     // Clean up old containers but not the new one
//                     sh """
//                         docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | grep -v `docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER}` | xargs docker rm -f
//                     """
//                 } catch (Exception e) {
//                     echo "Error cleaning up old containers: ${e.message}"
//                 }
//
//                 try {
//                     // Clean up old Docker images but keep the new one
//                     sh "docker images -q ${DOCKER_REGISTRY}:${BUILD_NUMBER} | xargs docker rmi -f"
//                 } catch (Exception e) {
//                     echo "Error cleaning up old Docker images: ${e.message}"
//                 }
//
//                 // Clean build artifacts from Jenkins workspace
//                 cleanWs()
//             }
//         }
//     }
// }stage('Snyk Scan') {
//             steps {
//                 script {
//                     dir('app') {
//                         withEnv(["SNYK_TOKEN=${SNYK_TOKEN}"]) {
//                             sh 'snyk auth $snyk-jenkins'
//                             sh 'snyk test --docker ${IMG_NAME}'
//                         }
//                     }
//                 }
//             }
//         }
//
//